options {
    OUTPUT_LANGUAGE = "c++";
    OUTPUT_DIRECTORY = "generated";
    OUTPUT_FILE="parser.jj";
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 3;
    STOP_ON_FIRST_ERROR = true;
    
    /**
    DEBUG_PARSER = true;
    */

    FORCE_LA_CHECK = true;

    MULTI = true;
    VISITOR = true;
    
    NODE_DEFAULT_VOID=true;
    VISITOR_DATA_TYPE="void*";
    VISITOR_RETURN_TYPE="void*";
}

PARSER_BEGIN(MiniJavaParser)

PARSER_END(MiniJavaParser)

/* Avoid white spaces of any kind */
SKIP :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */

SKIP :
{
  < "//" (~["\r", "\n"])* >
| < "/*" > : Start_Block_Comment
}

<Start_Block_Comment> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}


TOKEN: 
{
  < INT: "int" >
| < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < STRING: "String" >
| < EXTENDS: "extends" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < NEW: "new" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < SYSTEM_OUT_PRINTLN: "System.out.println" >
| < LENGTH: "length" >
| < NOT: "!" >
| < RETURN: "return" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < ASSIGN: "=" >
| < EQ: "==" >
| < NEQ: "!=" >
| < LT: "<" >
| < LTE: "<=" >
| < GT: ">" >
| < GTE: ">=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < AND: "&&" >
| < OR: "||" >
| < IDENTIFIER: <IDENT_START> (<IDENT_BODY>)* >
| 
  <IDENT_START:
    [
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
|
  <IDENT_BODY:
    [
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
}


/** Program beginning */
ASTRoot* Program() #Root : {}
{
  MainClass()
  ( ClassDecl() )*
  <EOF>
  { return jjtThis; }
}

void MainClass() :
{}
{
  (
    <CLASS> Identifier() <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> Identifier() <RPAREN> 
  <LBRACE>
  Statement()
  <RBRACE>
  <RBRACE>
  ) #MainClass
}

void ClassDecl() #ClassDecl(>1) :
{}
{
  <CLASS> Identifier() ( <EXTENDS> Identifier() )? <LBRACE>
  ( VarDecl() )*
  ( MethodDecl() )*
  <RBRACE>
}

void VarDecl() :
{}
{
  (
    Type() Identifier() <SEMICOLON>
  ) #VarDecl
}

void MethodDecl() #MethodDeclNode(>2) :
{}
{
  <PUBLIC> 
  Type()
  ( Identifier() ) #MethodIDNode
  <LPAREN> ArgsList() <RPAREN>
  (
    Statement()
  )*
}

void ArgsList() :
{}
{
  ( 
    ( Type() Identifier() ( FormalRest() )* )?
  ) #ArgsList
}

void FormalRest() :
{}
{
  <COMMA> Type() Identifier()
}

void Type() #TypeNode : {}
{
  ( SimpleType() | Identifier() ) (ArrayDecl())?
}

void ArrayDecl() #ArrayDeclNode : {}
{
  <LBRACKET> <RBRACKET> 
}

void SimpleType() #SimpleTypeNode : 
{
  Token* t = NULL;
}
{
  (
    t=<INT>
  |
    t=<BOOLEAN> 
  )
  {
   jjtThis->setName(t->image); 
  }
}

void Statement() : {}
{
  BlockStatement()
|
  OptionalExprStmt()
|
  IfStatement()
| 
  WhileStatement()
| 
  PrintStatement()
|
  ReturnStatement()
}

void BlockStatement() #BlockStatementNode : {}
{
  <LBRACE>
  ( 
    Statement() 
  |
    VarDecl()
  )*
  <RBRACE>
}

void ReturnStatement() #ReturnStatementNode : {}
{
  <RETURN> (Exp())? <SEMICOLON>
}

void IfStatement() #IfStatementNode : {}
{
    <IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()
}

void WhileStatement() #WhileStatement : {}
{
    <WHILE> <LPAREN> Exp() <RPAREN> Statement()
}

void PrintStatement() #PrintStatement : {}
{
    <SYSTEM_OUT_PRINTLN> <LPAREN> Exp() <RPAREN> <SEMICOLON>
}

void OptionalExprStmt() #OptionalExprStmt : {}
{
    (Exp())? <SEMICOLON>
}

void Exp() : {}
{
  AssignExp()
}

void AssignExp(): {}
{
    OrExp() ( 
      ( <ASSIGN> OrExp() ) #AssignNode(2)
    )*
}

void OrExp() : {}
{
    AndExp() ( 
      ( <OR> AndExp() ) #OrNode(2)
    )*
}

void AndExp() :
{}
{
    EqNeqExp() ( 
      ( <AND> EqNeqExp() ) #AndNode(2)
    )*
}

void EqNeqExp() :
{
  Token* t = NULL;
}
{
    RelExp() 
    ( 
      ( ( 
          t=<EQ> 
        | 
          t=<NEQ> 
        )
        {
          jjtThis->setName(t->image);
        }
        RelExp() ) #EqualNotEqualNode(2) 
    )*
}

void RelExp() :
{
  Token* t = NULL;
}
{
    AddExp() 
    (
      ( ( 
          t=<LT> 
        | 
          t=<LTE> 
        |
          t=<GT> 
        | 
          t=<GTE> 
        )
        {
          jjtThis->setName(t->image);
        }
        AddExp() ) #RelationalNode(2)
    )*
}

void AddExp() :
{
  Token* t = NULL;
}
{
    MulExp() ( 
      ( 
        ( 
          t=<PLUS> 
        | 
          t=<MINUS> 
        )
        {
          jjtThis->setName(t->image);
        }
        MulExp() ) #AdditiveNode(2)
    )*
}

void MulExp() :
{
  Token* t = NULL;
}
{
    UnaryExp() ( 
      ( 
        (
          t=<MULT> 
        | 
          t=<DIV> 
        )
        {
          jjtThis->setName(t->image);
        } 
        UnaryExp() ) #MultiplicativeNode(2)
    )*
}

void UnaryExp() :
{
  Token* t = NULL;
}
{
  (
    (
      t=<NOT>
    )
    {
      jjtThis->setName(t->image);
    }
  PrimaryExp()
  ) #UnaryNode(1)
| PrimaryExp()
}

void PrimaryExp() :
{}
{
  BeforePrimay() ( AfterPrimary() )*
}

void BeforePrimay() : {}
{
  Identifier()
|
  Literal()
|
  <THIS>
| 
  <LPAREN> Exp() <RPAREN>
|
  LOOKAHEAD(2)
  AllocateMemory()

}

void AfterPrimary() : {}
{
  <LBRACKET> Exp() <RBRACKET>
|
  <DOT> Identifier()
| 
  <LPAREN> ExpList() <RPAREN>
}


void AllocateMemory() : {}
{
  <NEW> 
  (
    Identifier() <LPAREN> <RPAREN>
  |
    SimpleType()
  )
}

void Literal() #LiteralNode : 
{
  Token* t = NULL;
}
{
  t=<INTEGER_LITERAL> 
  {
    jjtThis->setValue(t->image);
  }
| 
  t=<TRUE>
  {
    jjtThis->setValue(t->image);
  }
| 
  t=<FALSE>
  {
    jjtThis->setValue(t->image);
  }
}

void Identifier() #Identifier :
{
  Token* t = NULL;
}
{
  t=<IDENTIFIER>
  {
    jjtThis->setName(t->image);
  }
}

void ExpList() : {}
{
  Exp() ( <COMMA> Exp() )*
}
