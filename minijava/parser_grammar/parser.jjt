options {
    OUTPUT_LANGUAGE = "c++";
    OUTPUT_DIRECTORY = "generated";
    OUTPUT_FILE="parser.jj";
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 3;
    STOP_ON_FIRST_ERROR = true;
    
    DEBUG_PARSER = true;

    FORCE_LA_CHECK = true;

   /** MULTI=false;
    NODE_DEFAULT_VOID=true;
    VISITOR = false;
    
    NODE_DEFAULT_VOID=true;
    VISITOR_DATA_TYPE="void*";
    VISITOR_RETURN_TYPE="void*";*/
}

PARSER_BEGIN(MiniJavaParser)

PARSER_END(MiniJavaParser)

/* Avoid white spaces of any kind */
SKIP :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */

SKIP :
{
  < "//" (~["\r", "\n"])* >
| < "/*" > : Start_Block_Comment
}

<Start_Block_Comment> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}


TOKEN: 
{
  < INT: "int" >
| < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < STRING: "String" >
| < EXTENDS: "extends" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < NEW: "new" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < SYSTEM_OUT_PRINTLN: "System.out.println" >
| < LENGTH: "length" >
| < NOT: "!" >
| < RETURN: "return" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < ASSIGN: "=" >
| < EQ: "==" >
| < NEQ: "!=" >
| < LT: "<" >
| < LTE: "<=" >
| < GT: ">" >
| < GTE: ">=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < AND: "&&" >
| < OR: "||" >
| < IDENTIFIER: <IDENT_START> (<IDENT_BODY>)* >
| 
  <IDENT_START:
    [
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
|
  <IDENT_BODY:
    [
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
}


/** Program beginning */
SimpleNode* Program() : {}
{
  MainClass()
  ( ClassDecl() )*
  <EOF>
  { return jjtThis; }
}

void MainClass() :
{}
{
  <CLASS> <IDENTIFIER> <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <IDENTIFIER> <RPAREN> 
  <LBRACE>
  Statement()
  <RBRACE>
  <RBRACE>
}

void ClassDecl() :
{}
{
  <CLASS> <IDENTIFIER> ( <EXTENDS> <IDENTIFIER> )? <LBRACE>
  ( VarDecl() )*
  ( MethodDecl() )*
  <RBRACE>
}

void VarDecl() :
{}
{
  Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDecl() :
{}
{
  <PUBLIC> Type() <IDENTIFIER> <LPAREN> FormalList() <RPAREN> <LBRACE>
  ( Statement() 
  |
    VarDecl()
  )*
  <RETURN> Exp() <SEMICOLON>
  <RBRACE>
}

void FormalList() :
{}
{
  ( Type() <IDENTIFIER> ( FormalRest() )* ) ?
}

void FormalRest() :
{}
{
  <COMMA> Type() <IDENTIFIER>
}

void Type() : {}
{
  ( SimpleType() | <IDENTIFIER> ) ( <LBRACKET> <RBRACKET> )?
}

void SimpleType() : {}
{
  <INT>
|
  <BOOLEAN> 
}

void Statement() : {}
{
  BlockStatement()
|
  ExpressionInStatement() <SEMICOLON>
|
  IfStatement()
| 
  WhileStatement()
| 
  PrintStatement()
|
  EmptyStatement()
}

void BlockStatement() : {}
{
  <LBRACE>
  ( Statement() )*
  <RBRACE>
}

void IfStatement() : {}
{
  <IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()
}

void WhileStatement() : {}
{
  <WHILE> <LPAREN> Exp() <RPAREN> Statement()
}

void PrintStatement() : {}
{
  <SYSTEM_OUT_PRINTLN> <LPAREN> Exp() <RPAREN> <SEMICOLON>
}

void EmptyStatement() : {}
{
  <SEMICOLON>
}

void ExpressionInStatement() : {}
{
  PrimaryExp() <ASSIGN> OrExp()
}

void Exp() : {}
{
  OrExp() [ <ASSIGN> Exp() ]
}

void OrExp() : {}
{
  AndExp() ( <OR> AndExp() )*
}

void AndExp() :
{}
{
  EqNeqExp() ( <AND> EqNeqExp() )*
}

void EqNeqExp() :
{}
{
  RelExp() ( ( <EQ> | <NEQ> ) RelExp() )*
}

void RelExp() :
{}
{
  AddExp() ( ( <LT> | <LTE> | <GT> | <GTE> ) AddExp() )*
}

void AddExp() :
{}
{
  MulExp() ( ( <PLUS> | <MINUS> ) MulExp() )*
}

void MulExp() :
{}
{
  (
    UnaryExp() ( ( <MULT> | <DIV> ) UnaryExp() )*
  )
}

void UnaryExp() :
{}
{
  <NOT> PrimaryExp()
| PrimaryExp()
}

void PrimaryExp() :
{}
{
  BeforePrimay() ( LOOKAHEAD(2) AfterPrimary() )*
}

void BeforePrimay() : {}
{
  <IDENTIFIER>
|
  Literal()
|
  <THIS>
| 
  <LPAREN> Exp() <RPAREN>
|
  LOOKAHEAD(2)
  AllocateMemory()

}

void AfterPrimary() : {}
{
  <LBRACKET> Exp() <RBRACKET>
|
  <DOT> <IDENTIFIER>
| 
  <LPAREN> ExpList() <RPAREN>
}


void AllocateMemory() : {}
{
  <NEW> 
  (
    <IDENTIFIER> <LPAREN> <RPAREN>
  |
    SimpleType()
  )
}

void Literal() : {}
{
<INTEGER_LITERAL> 
| 
  <TRUE>
| 
  <FALSE>
}

void ExpList() : {}
{
  Exp() ( <COMMA> Exp() )*
}