/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options {
    OUTPUT_LANGUAGE = "c++";
    OUTPUT_DIRECTORY = "generated";
                            
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 3;
    STOP_ON_FIRST_ERROR = true;
    
    DEBUG_PARSER = true;

    FORCE_LA_CHECK = true;

                 
                   
    
                           
                              
                                
}

PARSER_BEGIN(MiniJavaParser)

PARSER_END(MiniJavaParser)

/* Avoid white spaces of any kind */
SKIP :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */

SKIP :
{
  < "//" (~["\r", "\n"])* >
| < "/*" > : Start_Block_Comment
}

<Start_Block_Comment> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >   
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}


TOKEN: 
{
  < INT: "int" >
| < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < STRING: "String" >
| < EXTENDS: "extends" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < NEW: "new" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < SYSTEM_OUT_PRINTLN: "System.out.println" >
| < LENGTH: "length" >
| < NOT: "!" >
| < RETURN: "return" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < ASSIGN: "=" >
| < EQ: "==" >
| < NEQ: "!=" >
| < LT: "<" >
| < LTE: "<=" >
| < GT: ">" >
| < GTE: ">=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULT: "*" >
| < DIV: "/" >
| < AND: "&&" >
| < OR: "||" >
| < IDENTIFIER: <IDENT_START> (<IDENT_BODY>)* >
| 
  <IDENT_START:
    [
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
|
  <IDENT_BODY:
    [
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
}


/** Program beginning */
ASTRoot* Program()       : {/*@bgen(jjtree) Root */
  ASTRoot *jjtn000 = new ASTRoot(JJTROOT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  MainClass()
  ( ClassDecl() )*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MainClass() :
{}
{/*@bgen(jjtree) MainClass */
  {
    ASTMainClass *jjtn001 = new ASTMainClass(JJTMAINCLASS);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    <CLASS> Identifier() <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> Identifier() <RPAREN> 
  <LBRACE>
  Statement()
  <RBRACE>
  <RBRACE>
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/           
}

void ClassDecl()                :
{/*@bgen(jjtree) #ClassDecl(> 1) */
  ASTClassDecl *jjtn000 = new ASTClassDecl(JJTCLASSDECL);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ClassDecl(> 1) */
  try {
/*@egen*/
  <CLASS> Identifier() ( <EXTENDS> Identifier() )? <LBRACE>
  ( VarDecl() )*
  ( MethodDecl() )*
  <RBRACE>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void VarDecl() :
{}
{/*@bgen(jjtree) VarDecl */
  {
    ASTVarDecl *jjtn001 = new ASTVarDecl(JJTVARDECL);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Type() Identifier() <SEMICOLON>
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
}

void MethodDecl()                     :
{/*@bgen(jjtree) #MethodDeclNode(> 1) */
  ASTMethodDeclNode *jjtn000 = new ASTMethodDeclNode(JJTMETHODDECLNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #MethodDeclNode(> 1) */
  try {
/*@egen*/
  <PUBLIC> 
  Type()/*@bgen(jjtree) MethodIDNode */
  {
    ASTMethodIDNode *jjtn001 = new ASTMethodIDNode(JJTMETHODIDNODE);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( Identifier() )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
  <LPAREN> ArgsList() <RPAREN>
  (
    Statement()
  )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void ArgsList() :
{}
{/*@bgen(jjtree) ArgsList */
  {
    ASTArgsList *jjtn001 = new ASTArgsList(JJTARGSLIST);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( 
    ( Type() Identifier() ( FormalRest() )* )?
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          
}

void FormalRest() :
{}
{
  <COMMA> Type() Identifier()
}

void Type() : {}
{
  ( SimpleType() | Identifier() ) ( <LBRACKET> <RBRACKET> )?
}

void SimpleType()                 : {/*@bgen(jjtree) SimpleTypeNode */
  ASTSimpleTypeNode *jjtn000 = new ASTSimpleTypeNode(JJTSIMPLETYPENODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleTypeNode */
  try {
/*@egen*/
  <INT>
|
  <BOOLEAN>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Statement() : {}
{
  BlockStatement()
|
  OptionalExprStmt()
|
  IfStatement()
| 
  WhileStatement()
| 
  PrintStatement()
|
  ReturnStatement()
}

void BlockStatement()                         : {/*@bgen(jjtree) #BlockStatementNode(> 1) */
  ASTBlockStatementNode *jjtn000 = new ASTBlockStatementNode(JJTBLOCKSTATEMENTNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BlockStatementNode(> 1) */
  try {
/*@egen*/
  <LBRACE>
  ( 
    Statement() 
  |
    VarDecl()
  )*
  <RBRACE>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void ReturnStatement()                      : {/*@bgen(jjtree) ReturnStatementNode */
  ASTReturnStatementNode *jjtn000 = new ASTReturnStatementNode(JJTRETURNSTATEMENTNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatementNode */
  try {
/*@egen*/
  <RETURN> (Exp())? <SEMICOLON>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStatement()                  : {/*@bgen(jjtree) IfStatementNode */
  ASTIfStatementNode *jjtn000 = new ASTIfStatementNode(JJTIFSTATEMENTNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatementNode */
    try {
/*@egen*/
    <IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()/*@bgen(jjtree)*/
    } catch (...) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    } {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileStatement()                 : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement *jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    <WHILE> <LPAREN> Exp() <RPAREN> Statement()/*@bgen(jjtree)*/
    } catch (...) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    } {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrintStatement()                 : {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement *jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintStatement */
    try {
/*@egen*/
    <SYSTEM_OUT_PRINTLN> <LPAREN> Exp() <RPAREN> <SEMICOLON>/*@bgen(jjtree)*/
    } catch (...) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    } {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OptionalExprStmt()                       : {/*@bgen(jjtree) #OptionalExprStmt(> 1) */
  ASTOptionalExprStmt *jjtn000 = new ASTOptionalExprStmt(JJTOPTIONALEXPRSTMT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OptionalExprStmt(> 1) */
    try {
/*@egen*/
    (Exp())? <SEMICOLON>/*@bgen(jjtree)*/
    } catch (...) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    } {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void Exp() : {}
{
  AssignExp()
}

void AssignExp(): {}
{
    OrExp() (/*@bgen(jjtree) #AssignNode( 2) */
      {
        ASTAssignNode *jjtn001 = new ASTAssignNode(JJTASSIGNNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( <ASSIGN> OrExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/               
    )*
}

void OrExp() : {}
{
    AndExp() (/*@bgen(jjtree) #OrNode( 2) */
      {
        ASTOrNode *jjtn001 = new ASTOrNode(JJTORNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( <OR> AndExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/           
    )*
}

void AndExp() :
{}
{
    EqNeqExp() (/*@bgen(jjtree) #AndNode( 2) */
      {
        ASTAndNode *jjtn001 = new ASTAndNode(JJTANDNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( <AND> EqNeqExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/            
    )*
}

void EqNeqExp() :
{}
{
    RelExp() 
    (/*@bgen(jjtree) #EqNeqNode( 2) */
      {
        ASTEqNeqNode *jjtn001 = new ASTEqNeqNode(JJTEQNEQNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( ( <EQ> | <NEQ> ) RelExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/               
    )*
}

void RelExp() :
{}
{
    AddExp() 
    (/*@bgen(jjtree) #RelNode( 2) */
      {
        ASTRelNode *jjtn001 = new ASTRelNode(JJTRELNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      ( ( <LT> | <LTE> | <GT> | <GTE> ) AddExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/            
    )*
}

void AddExp() :
{}
{
    MulExp() (/*@bgen(jjtree) #AddNode( 2) */
      {
        ASTAddNode *jjtn001 = new ASTAddNode(JJTADDNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( ( <PLUS> | <MINUS> ) MulExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/            
    )*
}

void MulExp() :
{}
{
    UnaryExp() (/*@bgen(jjtree) #MulNode( 2) */
      {
        ASTMulNode *jjtn001 = new ASTMulNode(JJTMULNODE);
        bool jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ 
      ( ( <MULT> | <DIV> ) UnaryExp() )/*@bgen(jjtree)*/
      } catch (...) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
      } {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/            
    )*
}

void UnaryExp() :
{}
{/*@bgen(jjtree) #UnaryNode( 1) */
  {
    ASTUnaryNode *jjtn001 = new ASTUnaryNode(JJTUNARYNODE);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
  <NOT> PrimaryExp()
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/              
| PrimaryExp()
}

void PrimaryExp() :
{}
{
  BeforePrimay() ( AfterPrimary() )*
}

void BeforePrimay() : {}
{
  Identifier()
|
  Literal()
|
  <THIS>
| 
  <LPAREN> Exp() <RPAREN>
|
  LOOKAHEAD(2)
  AllocateMemory()

}

void AfterPrimary() : {}
{
  <LBRACKET> Exp() <RBRACKET>
|
  <DOT> Identifier()
| 
  <LPAREN> ExpList() <RPAREN>
}


void AllocateMemory() : {}
{
  <NEW> 
  (
    Identifier() <LPAREN> <RPAREN>
  |
    SimpleType()
  )
}

void Literal()              : 
{
  Token* t = NULL;/*@bgen(jjtree) LiteralNode */
  ASTLiteralNode *jjtn000 = new ASTLiteralNode(JJTLITERALNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) LiteralNode */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    jjtn000->setValue(t->image);
  }
| 
  t=<TRUE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000->setValue(t->image);
  }
| 
  t=<FALSE>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000->setValue(t->image);
  }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Identifier()             :
{
  Token* t = NULL;/*@bgen(jjtree) Identifier */
  ASTIdentifier *jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000->setName(t->image);
  }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpList() : {}
{
  Exp() ( <COMMA> Exp() )*
}