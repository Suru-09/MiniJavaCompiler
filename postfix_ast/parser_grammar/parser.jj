/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options {
    OUTPUT_LANGUAGE = "c++";
    OUTPUT_DIRECTORY = "generated";
                            
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 3;
    STOP_ON_FIRST_ERROR = true;
    
    /**
    DEBUG_PARSER = true;
    */

    FORCE_LA_CHECK = true;

                 
                   
                           
                              
                                
}

PARSER_BEGIN(PostfixParser)
PARSER_END(PostfixParser)

TOKEN : {
  < Integer: (["0"-"9"])+ >
}

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

ASTRoot* Start()       :
{/*@bgen(jjtree) Root */
  ASTRoot *jjtn000 = new ASTRoot(JJTROOT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  Expression()
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression() :
{}
{/*@bgen(jjtree) #Expression(> 1) */
  {
    ASTExpression *jjtn001 = new ASTExpression(JJTEXPRESSION);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Term()
    ( "+" Term() )*
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/                
}

void Term() :
{}
{/*@bgen(jjtree) #Term(> 1) */
  {
    ASTTerm *jjtn001 = new ASTTerm(JJTTERM);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Factor()
    ( "*" Factor() )*
  )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/          
}

void Factor() : {}
{/*@bgen(jjtree) Factor */
  {
    ASTFactor *jjtn001 = new ASTFactor(JJTFACTOR);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ("(" Expression() ")" )/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/        
  | IntegerConstant()

}

void IntegerConstant()                  :
{
    Token* t = NULL;/*@bgen(jjtree) IntegerConstant */
  ASTIntegerConstant *jjtn000 = new ASTIntegerConstant(JJTINTEGERCONSTANT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) IntegerConstant */
    try {
/*@egen*/
    t = <Integer>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000->setValue(t->image);
    }/*@bgen(jjtree)*/
    } catch (...) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
    } {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}