options {
    OUTPUT_LANGUAGE = "c++";
    OUTPUT_DIRECTORY = "generated";
    OUTPUT_FILE="parser.jj";
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 3;
    STOP_ON_FIRST_ERROR = true;
    
    /**
    DEBUG_PARSER = true;
    */

    FORCE_LA_CHECK = true;

    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID=true;
    VISITOR_DATA_TYPE="void*";
    VISITOR_RETURN_TYPE="void*";
}

PARSER_BEGIN(PostfixParser)
PARSER_END(PostfixParser)

TOKEN : {
  < Integer:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
}

ASTRoot* Start() #Root :
{}
{
  Expression()
  <EOF>
  {
    return jjtThis;
  }
}

void Expression() :
{}
{
  (
    Term()
    ( "+" Term() )*
  ) #Expression(>1)
}

void Term() :
{}
{
  (
    Factor()
    ( "*" Factor() )*
  ) #Term(>1)
}

void Factor() : {}
{
  ("(" Expression() ")" ) #Factor
  | IntegerConstant()

}

void IntegerConstant() #IntegerConstant :
{
    Token* t = NULL;
}
{
    t = <Integer>
    {
        jjtThis->setValue(t->image);
    }
}
